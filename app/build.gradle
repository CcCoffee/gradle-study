import com.android.build.gradle.api.BaseVariant

apply plugin: 'com.android.application'
//apply plugin: 'com.example.plugin'
//apply from: this.rootProject.file('releaseInfo.gradle')
apply from: this.project.file('parseReleaseXml.gradle')
apply from: this.project.file('buildCostTime.gradle')
apply from: this.project.file('testTask.gradle')
apply from: this.project.file('copy.gradle')

//定义扩展属性
ext {
    applicationId = "com.example.myapplication"
}

android {
    compileSdkVersion rootProject.android.compileSdkVersion
    buildToolsVersion rootProject.android.buildToolsVersion
    defaultConfig {
//        applicationId mApplicationId
        applicationId this.applicationId
        minSdkVersion rootProject.android.minSdkVersion
        targetSdkVersion mTargetSdkVersion
        versionCode rootProject.android.versionCode
        versionName rootProject.android.versionName
        testInstrumentationRunner rootProject.android.testInstrumentationRunner
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    flavorDimensions "version"
    productFlavors{
        baidu {}
        google {}
    }

//    sourceSets {
//        main {
//            //为每个业务模块分别创建一个专属的资源文件夹，方便项目资源管理
//            res.srcDirs = ['src/main/res',
//            'src/main/res-user',
//            'src/main/res-player']
//        }
//    }
}

//可以配置在android的闭包外
this.android.sourceSets {
    main {
        //为每个业务模块分别创建一个专属的资源文件夹，方便项目资源管理
        res.srcDirs = ['src/main/res',
                       'src/main/res-user',
                       'src/main/res-player']
    }
}

// 为应用程序添加第三方依赖
dependencies {
//    implementation 'com.android.tools.build:gradle:3.5.3'
    implementation fileTree(dir: 'libs', include: ['*.jar'])//本地jar包
    implementation 'androidx.appcompat:appcompat:1.1.0'//远程第三方依赖
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation project(path: ':mylibrary')//本地库工程
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

this.afterEvaluate {
    this.android.applicationVariants.all { BaseVariant variant ->
        def versionName = variant.versionName
        println "the version name is $versionName"
        variant.outputs.all {
            outputFileName = "app-${variant.baseName}-${variant.versionName}.apk"
        }

        def task = variant.checkManifestProvider.get()
        println ">>>>>>>$task.name"
    }
}