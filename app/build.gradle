apply plugin: 'com.android.application'

//def mApplicationId = "com.example.myapplication"

//定义扩展属性
ext {
    applicationId = "com.example.myapplication"
}

android {
    compileSdkVersion this.rootProject.android.compileSdkVersion
    buildToolsVersion "29.0.2"
    defaultConfig {
//        applicationId mApplicationId
        applicationId this.applicationId
        minSdkVersion 24
        targetSdkVersion mTargetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

// 为应用程序添加第三方依赖
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])//本地jar包
    implementation 'androidx.appcompat:appcompat:1.1.0'//远程第三方依赖
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation project(path: ':mylibrary')//本地库工程
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

//copy {
//    from file('proguard-rules.pro')
//    into this.getRootProject().getRootDir()
//}

copy {
    from file("${this.getBuildDir().path}/outputs/apk/")
    into "${this.getRootProject().getBuildDir().path}/apk/"
//    exclude('output.json')
//    rename {'test.apk'}
}

fileTree('build/outputs/apk/') { ConfigurableFileTree configurableFileTree ->
    configurableFileTree.visit { FileVisitDetails fileVisitDetails ->
        println "复制文件${fileVisitDetails.getFile().getName()}"
        copy {
            from fileVisitDetails.getFile()
            into this.getRootProject().getBuildDir().absolutePath + '/test/'
        }
    }
}
