// Top-level build file where you can add configuration options common to all sub-projects/modules.
//file方法会从当前工程中寻找指定文件
apply from: this.file('common.gradle')

//buildscript {
//    repositories {
//        google()
//        jcenter()
//
//    }
//    dependencies {
//        classpath 'com.android.tools.build:gradle:3.5.2'
//
//        // NOTE: Do not place your application dependencies here; they belong
//        // in the individual module build.gradle files
//    }
//}

buildscript {
    dependencies {
        //指定项目为安卓程序
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath 'com.tencent.tinker:tinker-patch-gradle-plugin:1.9.1'
    }
    repositories {
//        google()
        jcenter()
        maven {
            url 'https://maven.aliyun.com/repository/google'
            name '阿里云google代理仓库'
        }
//        maven {
//            url 'https://maven.aliyun.com/repository/jcentral'
//            name '阿里云jcenter代理仓库'
//        }
        maven {
            url 'https://maven.aliyun.com/repository/central'
            name '阿里云center代理仓库'
        }
        maven {
            url 'https://maven.aliyun.com/repository/releases'
            name '阿里云releaes仓库'
//            credentials {
//                    username: 'admin'
//                    password: 'admin123'
//            }
        }
    }
}

//配置当前节点项目和子项目的公用配置
allprojects {
    group 'com.imooc'
    version '1.0.0-snapshot'
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * 监听配置阶段开始前的监听回调
 */
this.beforeEvaluate {
    println "配置阶段准备执行..." // 执行./gradlew clean && ./gradlew build没有执行此方法
}
/**
 * 配置阶段完成以后的回调
 */
this.afterEvaluate {
    println "配置阶段执行完毕..."
}

this.gradle.buildStarted {
    println "构建阶段执行开始..." // 执行./gradlew clean && ./gradlew build没有执行此方法
}
/**
 * gradle执行完毕之后的回调监听
 */
this.gradle.buildFinished {
    println "构建阶段执行完毕..."
}

this.gradle.beforeProject {}
this.gradle.afterProject {}

//this.getProjects()
//this.getSubProjects()

def getProjects() {
    println '------------------------------------------------------------'
    println 'Root project'
    println '------------------------------------------------------------'
    println ''
    this.getAllprojects().eachWithIndex { Project entry, int i ->
        if (i == 0) {
            println "Root project '${entry.name}'"
        } else if (i == 1) {
            println "+--- Project ':${entry.name}'"
        } else {
            println "\\--- Project ':${entry.name}'"
        }
    }
    println ''
}

def getSubProjects() {
    println '------------------------------------------------------------'
    println 'Sub project'
    println '------------------------------------------------------------'
    println ''
    this.getSubprojects().each { Project entry ->
        println "+--- Project ':${entry.name}'"
    }
    println ''
}

project('app') { Project project ->
    apply plugin: 'com.android.application'
    dependencies {

    }
    android {

    }
}

if(hasProperty('isLoadMylibrary')?isLoadMylibrary.toBoolean():false){
    project('mylibrary') {Project project ->
        apply plugin: 'com.android.library'
    }
}

//println project('app').group

//每一个子项目为库工程的项目推送到maven仓库
subprojects { Project project ->
    if(project.plugins.hasPlugin('com.android.library')){
        apply from: '../publishToMaven.gradle'
    }
}

//ext {
//    compileSdkVersion = 29
//}

println "getRootDir() : ${getRootDir().absolutePath}"
println "getProjectDir() : ${getProjectDir().absolutePath}"
println "getBuildDir() : ${getBuildDir().absolutePath}"

//println this.getContent("common.gradle")//相对当前项目路径
def getContent(String filePath){
    try{
        File file = file(filePath)
        return file.text
    }catch(GradleException e){
        return "File ${filePath} not found"
    }
}


task('apkcopy') {
    doLast {
        def sourcePath = this.buildDir.path + "/apk/release/"
        def destinationPath = '/Users/kevin/Downloads/'
        def command = "mv -f ${sourcePath} ${destinationPath}"
        exec {
            try {
                executable 'bash'
                args '-c', command
                println "The command is execute success"
            } catch (GradleException e) {
                println "The command is execute failed"
            }
        }
    }
}